#!/bin/bash

statr()
{
	if [[ `ifconfig | grep "inet " | grep -v "127.0.0.1"` == "" ]]
	then
		printf "\033[91mError\033[0m: No internet connection...\n";
		return ;
	fi

	if [[ `ps ax | grep "curl" | grep "flickr" | grep -v grep` != "" ]]
	then
		printf "\033[91mError\033[0m: this process is already running...\n";
		return ;
	fi

	if [[ $# == 1 ]]
	then
		f_user=$(echo "$1" | tr '/' '\n' | grep -vx '$' | tail -n 1);
	else
		printf "\033[91musage\033[0m: statr <user_id | gallery_url>\n";
		return ;
	fi

	f_link="https://www.flickr.com/photos/$f_user/";
	pcheck="/tmp/.pcheck_$f_user";
	tmpf="/tmp/.tmpf_pics_$f_user";
	tlist="/tmp/.f_pics_$f_user";
	qty="/tmp/.qty_$f_user";
	vqty="/tmp/.vqty_$f_user";
	fqty="/tmp/.fqty_$f_user";
	cqty="/tmp/.cqty_$f_user";
	lqty="/tmp/.lqty_$f_user";
	pcln="/tmp/.pcln_$f_user";
	nqty="/tmp/.nqty_$f_user";
	pics_dir="/tmp/.pics_dir_$f_user";
	fstat="/tmp/.final_stats_$f_user";
	rm -rf $pcheck $tmpf $tlist $qty $vqty $fqty $cqty $nqty $lqty 2> /dev/null;

	printf "Getting \033[1;94mFlick\033[1;95mr\033[0m datas for \033[96m$f_user\033[0m...\n";

	for i in {1..1000}
	do
		curl -0s "$f_link/page$i/" > $pcheck;
		if [[ `echo "$i"` == "1" ]]
		then
			totnum=$(cat $pcheck | tr ',' '\n' | tr '}' '\n' | grep "public_photos_count" | cut -d ':' -f2 | cut -d '"' -f2);
			idpic=$(cat $pcheck | grep "avatar-mask" | tr ' ' '\n' | tail -n 1 | cut -d '"' -f2);
			idnam=$(cat $pcheck | tr ',' '\n' | grep "og:title" | tr '=' '\n' | tail -n 1 | cut -d '"' -f2);
			account=$(cat $pcheck | tr ',' '\n' | grep "is_pro" | tr '}' ':' | cut -d ':' -f2);
			if [[ $account == "0" ]]
			then
				ispro="Free";
			else
				ispro="Pro";
			fi
		fi
		cat $pcheck | tr ',' '\n' | grep "\"id\":" | grep -v "{\|}" | tr ':' '\n' | grep -v "id" | cut -d '"' -f2 | sort -u > $tmpf;
		if [[ `cat $tmpf` != "" ]]
		then
			cat $tmpf >> $tlist;
		else
			break ;
		fi
	done
	rm -rf $tmpf $pcheck;

	p_num=$(cat $tlist 2> /dev/null | wc -l | awk '{print $1}');
	if [[ `printf "$p_num" 2> /dev/null` != "0" ]]
	then
		printf "\033[92mDone\033[0m -> \033[96m$p_num\033[0m pictures to be analyzed\n";
	else
		http_ret=$(curl -sI "$f_link" | head -n 1 | tr ' ' '\n' | tail -n +2 | head -n 1);
		if [[ $http_ret == "404" ]]
		then
			printf "\033[91mError\033[0m (404): This is not the user you're looking for...\n";
		elif [[ $http_ret == "200" ]]
		then
			printf "\033[91mError\033[0m: You have no power here ! (Private Datas)...\n";
		else
			printf "\033[91mUnknown Error\033[0m: Request failed for some reason...\n";
		fi
		rm -rf $tlist 2> /dev/null;
		return ;
	fi

	rm -rf $qty 2> /dev/null;
	mkdir $pics_dir;
	for i in `cat $tlist`
	do
		printf "\rCollecting datas..."
		curl -s0 "$f_link/$i" > "$pics_dir/$i" & 2> /dev/null
	done 2> /dev/null

	while [ 1 ]
	do
		cur_proc=$(ps ax | grep "flickr" | grep "`cat $tlist`" | grep -v "grep");
		if [[ `echo $cur_proc` != "" ]]
		then
			printf "\r\033[K";
			echo "($totnum - $(echo "$cur_proc" | wc -l | awk '{print $1}')) * 100 / $p_num" | bc | tr '\n' '%';
		else
			break ;
		fi
	done

	for i in `cat $tlist`
	do
		echo "$f_link/$i" >> $qty 2> /dev/null;
		cat "$pics_dir/$i" | grep -i "title=\"" | head -n 1 | sed -e "s/\|\"\/>$\|\t\t\t\t  title=\"//g" >> $qty 2> /dev/null
		cat "$pics_dir/$i" | tr ',' '\n' | grep -i "affichages\|fave_count\|comment_count\|baseurl: " | head -n 4 | sort -r | sed -e "s/\"fave_count\":\|\"comment_count\":\|\t.baseURL: //g" | cut -c 2- | rev | cut -c 2- | rev | sed -e "s/Affichage\|\t//g" | sed -e "s/.jpg'/.jpg/g" >> $qty 2> /dev/null
	done 2> /dev/null

	cat $qty | sed -n '1~6p' > $pcln;
	cat $qty | sed -n '2~6p' > $nqty;
	cat $qty | sed -n '3~6p' > $fqty;
	cat $qty | sed -n '4~6p' > $cqty;
	cat $qty | sed -n '5~6p' > $lqty;
	cat $qty | sed -n '6~6p' | sed -e "s/ //g" > $vqty;
	printf "\r\033[K\033[92m100";
	echo -n "%";
	printf "\033[0m -> \033[92mPictures analyzed !\033[0m\n\n";

	mostv=$(cat $vqty | grep -nx `cat $vqty | sort -hr | head -n 1`);
	mostvname=$(cat $nqty | head -n `printf $mostv | cut -d ':' -f1` | tail -n 1);
	mostvlink=$(cat $lqty | head -n `printf $mostv | cut -d ':' -f1` | tail -n 1);
	mostvln=$(cat $pcln | head -n `printf $mostv | cut -d ':' -f1` | tail -n 1);
	mostf=$(cat $fqty | grep -nx `cat $fqty | sort -hr | head -n 1`);
	mostfname=$(cat $nqty | head -n `printf $mostf | cut -d ':' -f1` | tail -n 1);
	mostflink=$(cat $lqty | head -n `printf $mostf | cut -d ':' -f1` | tail -n 1);
	mostfln=$(cat $pcln | head -n `printf $mostf | cut -d ':' -f1` | tail -n 1);
	mostc=$(cat $cqty | grep -nx `cat $cqty | sort -hr | head -n 1`);
	mostcname=$(cat $nqty | head -n `printf $mostc | cut -d ':' -f1` | tail -n 1);
	mostclink=$(cat $lqty | head -n `printf $mostc | cut -d ':' -f1` | tail -n 1);
	mostcln=$(cat $pcln | head -n `printf $mostc | cut -d ':' -f1` | tail -n 1);

	mostv_i=$(printf $mostv | cut -d ':' -f2);
	mostf_i=$(printf $mostf | cut -d ':' -f2);
	mostc_i=$(printf $mostc | cut -d ':' -f2);

	printf "_@:IDN:@_${idnam}_@:EOL:@__@:IDP:@_${idpic}_@:EOL:@__@:PRO:@_${ispro}_@:EOL:@_\n" > $fstat;

	printf "_@:TTV:@_$(echo `cat $vqty | tr '\n' '+' | rev | cut -c 2- | rev` | bc)_@:EOL:@__@:TTF:@_$(echo `cat $fqty | tr '\n' '+' | rev | cut -c 2- | rev` | bc)_@:EOL:@__@:TTC:@_$(echo `cat $cqty | tr '\n' '+' | rev | cut -c 2- | rev` | bc)_@:EOL:@_\n" >> $fstat;

	printf "_@:MVP:@_${mostvname}_@:nfo:@_${mostv_i}_@:vew:@_${mostvlink}_@:RLN:@_${mostvln}_@:EOL:@__@:MFP:@_${mostfname}_@:nfo:@_${mostf_i}_@:fav:@_${mostflink}_@:RLN:@_${mostfln}_@:EOL:@__@:MCP:@_${mostcname}_@:nfo:@_${mostc_i}_@:com:@_${mostclink}_@:RLN:@_${mostcln}_@:EOF:@_" >> $fstat;


	csv_fdatas="/tmp/.flickr_datas_${f_user}.csv";
	displayer="/media/Datas/perso_progs/bash/statr/displayer";
	html_out="/tmp/.fstat_${f_user}.html";

	cat $fstat > $csv_fdatas;
	$displayer/conv $csv_fdatas;

	$displayer/2html $csv_fdatas > $html_out;
	firefox $html_out & 2> /dev/null;

	rm -rf $fstat $pics_dir $pcheck $tmpf $tlist $qty $vqty $fqty $cqty $nqty $lqty 2> /dev/null;
}

statr $@ 2> /dev/null;
